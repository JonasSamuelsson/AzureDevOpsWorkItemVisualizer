@page "/"

@using AzureDevOpsWorkItemVisualizer.Core
@using AzureDevOpsWorkItemVisualizer.Core.Model
@using Microsoft.AspNetCore.Components
@using System
@using System.Collections.Generic
@using System.Collections.Specialized
@using System.Linq
@using System.Security.Cryptography.X509Certificates
@using System.Threading.Tasks

@inject IJSRuntime Javascript
@inject Blazored.LocalStorage.ISyncLocalStorageService LocalStorage
@inject NavigationManager NavigationManager

<div class="full-screen">
   <div style="position: fixed; top: 10px; left: 10px;" @onload="LoadEditorValues">
      <div style="background-color: #e5e5e5; border-radius: 10px; padding: 10px; width: 275px;">
         <div hidden="@(_editorVisible == false)">
            <div><label for="organization">Organization</label></div>
            <div><input id="organization" @bind="_editorValues.Organization" type="text" /></div>
            <div><label for="project">Project</label></div>
            <div><input id="project" @bind="_editorValues.Project" type="text" /></div>
            <div><label for="pat">Personal access token</label></div>
            <div><input id="pat" @bind="_editorValues.PersonalAccessToken" type="password" /></div>
            <div>
               <input id="storePat" @bind="_editorValues.StorePersonalAccessToken" type="checkbox" />
               <label for="storePat">Store personal access token</label>
            </div>
            <div>
               <label for="ids">Work items</label>
               <input id="ids" @bind="_editorValues.WorkItemIds" type="text" placeholder="id1 id2" />
               <br />
               <input id="includeEpics" @bind="_editorValues.IncludeEpics" type="checkbox" />
               <label for="includeEpics">Epics</label>
               <input id="includeFeatures" @bind="_editorValues.IncludeFeatures" type="checkbox" />
               <label for="includeFeatures">Features</label>
               <input id="includePbis" @bind="_editorValues.IncludePbis" type="checkbox" />
               <label for="includePbis">PBIs</label>
               <br />
               <input id="includeBugs" @bind="_editorValues.IncludeBugs" type="checkbox" />
               <label for="includeBugs">Bugs</label>
               <input id="includeTasks" @bind="_editorValues.IncludeTasks" type="checkbox" />
               <label for="includeTasks">Tasks</label>
               <br />
               <input id="includeFinished" @bind="_editorValues.IncludeFinishedWorkItems" type="checkbox" />
               <label for="includeFinished">Finished</label>
               <input id="includeIndirect" @bind="_editorValues.IncludeIndirectWorkItems" type="checkbox" />
               <label for="includeIndirect">Indirect</label>
            </div>
            <div>
               <label>Layout</label>
               <br />
               <select @bind="_editorValues.Layout">
                  <option value="LR">Left to right</option>
                  <option value="TB">Top down</option>
                  <option value="RL">Right to left</option>
                  <option value="BT">Bottom up</option>
               </select>
               <input id="optimizeLinks" @bind="_editorValues.OptimizeLinks" type="checkbox" />
               <label for="optimizeLinks">Optimize links</label>
            </div>
         </div>
         <div>
            <button style="width: 90px" disabled="@(_loading)" @onclick="LoadWorkItems">
               <span hidden="@(_loading)">Load</span>
               <span hidden="@(!_loading)">Loading...</span>
            </button>
            <div style="float: right; padding-top: 4px">
               @*<span class="oi oi-link-intact"></span>*@
               <a href="#" @onclick="CopyUriToClipboard">Copy url</a>
               &nbsp;
               <span class="oi oi-caret-top" hidden="@(!_editorVisible)" @onclick="ToggleEditorVisibility"></span>
               <span class="oi oi-caret-bottom" hidden="@(_editorVisible)" @onclick="ToggleEditorVisibility"></span>
            </div>
         </div>
      </div>
   </div>
   <div id="graph" class="full-screen"></div>
</div>

@code {
   private readonly EditorValues _editorValues = new EditorValues();
   private bool _loading;
   private bool _editorVisible = true;

   private string _graph;
   private ElementReference _viz;

   protected override void OnAfterRender(bool firstRender)
   {
      if (firstRender)
      {
         LoadEditorValues();
      }

      base.OnAfterRender(firstRender);
   }

   private ISet<int> ParseIds()
   {
      return _editorValues.WorkItemIds
         .Split(new[] { ' ', ',' }, StringSplitOptions.RemoveEmptyEntries)
         .Select(int.Parse)
         .ToHashSet();
   }

   private async Task LoadWorkItems()
   {
      try
      {
         SaveEditorValues();

         _loading = true;

         var workItemIds = ParseIds();
         var workItemTypes = new HashSet<WorkItemType>();
         if (_editorValues.IncludeBugs) workItemTypes.Add(WorkItemType.Bug);
         if (_editorValues.IncludeEpics) workItemTypes.Add(WorkItemType.Epic);
         if (_editorValues.IncludeFeatures) workItemTypes.Add(WorkItemType.Feature);
         if (_editorValues.IncludePbis) workItemTypes.Add(WorkItemType.PBI);
         if (_editorValues.IncludeTasks) workItemTypes.Add(WorkItemType.Task);
         var client = new AzureDevOpsClient(new AzureDevOpsClientOptions
            {
               Organization = _editorValues.Organization,
               PersonalAccessToken = _editorValues.PersonalAccessToken,
               Project = _editorValues.Project
            });
         var crawler = _editorValues.IncludeIndirectWorkItems
            ? (ICrawler)new IndirectLinksCrawler(client)
            : new DirectLinksCrawler(client);
         var crawlerOptions = new CrawlerOptions
            {
               IncludeFinishedWorkItems = _editorValues.IncludeFinishedWorkItems,
               OptimizeLinks = _editorValues.OptimizeLinks
            };
         var data = await crawler.GetData(workItemIds, workItemTypes, crawlerOptions);
         var rankdir = _editorValues.Layout;
         var graph = new GraphGenerator().GenerateGraph(data, new GraphGenerator.Options
            {
               AzureDevOpsOrganization = _editorValues.Organization,
               AzureDevOpsProject = _editorValues.Project,
               HighlightedWorkItemIds = workItemIds,
               RankDir = rankdir
            });

         Console.WriteLine(graph);

         await Javascript.InvokeVoidAsync("updateGraph", graph);
      }
      catch (Exception exception)
      {
         await Javascript.InvokeVoidAsync("alert", exception.ToString());
      }
      finally
      {
         _loading = false;
      }
   }

   private void LoadEditorValues()
   {
      var empty = "";
      var values = LocalStorage.GetItem<EditorValues>("editor");

      var layout = values?.Layout ?? "LR";
      if (layout.Contains("-"))
      {
         layout = "LR";
      }

      _editorValues.Organization = values?.Organization ?? empty;
      _editorValues.Project = values?.Project ?? empty;
      _editorValues.PersonalAccessToken = values?.PersonalAccessToken ?? empty;
      _editorValues.StorePersonalAccessToken = values?.StorePersonalAccessToken ?? false;
      _editorValues.WorkItemIds = values?.WorkItemIds ?? empty;
      _editorValues.IncludeBugs = values?.IncludeBugs ?? false;
      _editorValues.IncludeEpics = values?.IncludeEpics ?? false;
      _editorValues.IncludeFeatures = values?.IncludeFeatures ?? true;
      _editorValues.IncludeFinishedWorkItems = values?.IncludeFinishedWorkItems ?? false;
      _editorValues.IncludeIndirectWorkItems = values?.IncludeIndirectWorkItems ?? false;
      _editorValues.IncludePbis = values?.IncludePbis ?? true;
      _editorValues.IncludeTasks = values?.IncludeTasks ?? false;
      _editorValues.Layout = layout;
      _editorValues.OptimizeLinks = values?.OptimizeLinks ?? false;

      var query = new Uri(NavigationManager.Uri).ParseQueryString();

      if (query.Count != 0)
      {
         LoadEditorValue<string>("organization", query, x => _editorValues.Organization = x);
         LoadEditorValue<string>("projects", query, x => _editorValues.Project = x);
         LoadEditorValue<string>("ids", query, x => _editorValues.WorkItemIds = x);
         LoadEditorValue<bool>("bugs", query, x => _editorValues.IncludeBugs = x);
         LoadEditorValue<bool>("epics", query, x => _editorValues.IncludeEpics = x);
         LoadEditorValue<bool>("features", query, x => _editorValues.IncludeFeatures = x);
         LoadEditorValue<bool>("pbis", query, x => _editorValues.IncludePbis = x);
         LoadEditorValue<bool>("tasks", query, x => _editorValues.IncludeTasks = x);
         LoadEditorValue<bool>("indirect", query, x => _editorValues.IncludeIndirectWorkItems = x);
         LoadEditorValue<bool>("finished", query, x => _editorValues.IncludeFinishedWorkItems = x);
         LoadEditorValue<string>("layout", query, x => _editorValues.Layout = x);
         LoadEditorValue<bool>("optimize-links", query, x => _editorValues.OptimizeLinks = x);

         NavigationManager.NavigateTo(NavigationManager.BaseUri);
      }

      StateHasChanged();

      Console.WriteLine("editor values loaded");
   }

   private static void LoadEditorValue<T>(string name, NameValueCollection collection, Action<T> action)
   {
      var value = collection.Get(name);
      if (string.IsNullOrWhiteSpace(value)) return;
      action.Invoke((T)Convert.ChangeType(value, typeof(T)));
   }

   private async Task CopyUriToClipboard()
   {
      var dictionary = new Dictionary<string, string>();

      StoreEditorValue("organization", _editorValues.Organization, dictionary);
      StoreEditorValue("projects", _editorValues.Project, dictionary);
      StoreEditorValue("ids", _editorValues.WorkItemIds, dictionary);
      StoreEditorValue("bugs", _editorValues.IncludeBugs, dictionary);
      StoreEditorValue("epics", _editorValues.IncludeEpics, dictionary);
      StoreEditorValue("features", _editorValues.IncludeFeatures, dictionary);
      StoreEditorValue("pbis", _editorValues.IncludePbis, dictionary);
      StoreEditorValue("tasks", _editorValues.IncludeTasks, dictionary);
      StoreEditorValue("indirect", _editorValues.IncludeIndirectWorkItems, dictionary);
      StoreEditorValue("finished", _editorValues.IncludeFinishedWorkItems, dictionary);
      StoreEditorValue("layout", _editorValues.Layout, dictionary);
      StoreEditorValue("optimize-links", _editorValues.OptimizeLinks, dictionary);

      var uri = $"{NavigationManager.BaseUri}?{string.Join("&", dictionary.Select(x => $"{x.Key}={x.Value}"))}";

      await Javascript.InvokeVoidAsync("navigator.clipboard.writeText", uri);
   }

   private static void StoreEditorValue<T>(string name, T value, Dictionary<string, string> dictionary)
   {
      dictionary.Add(name, value.ToString().ToLowerInvariant());
   }

   private void SaveEditorValues()
   {
      LocalStorage.SetItem("editor", _editorValues);
   }

   private void ToggleEditorVisibility()
   {
      _editorVisible = !_editorVisible;
   }

   private class EditorValues
   {
      public string Organization { get; set; }
      public string Project { get; set; }
      public string PersonalAccessToken { get; set; }
      public string WorkItemIds { get; set; }
      public bool StorePersonalAccessToken { get; set; }
      public bool IncludeEpics { get; set; }
      public bool IncludeFeatures { get; set; }
      public bool IncludePbis { get; set; }
      public bool IncludeBugs { get; set; }
      public bool IncludeTasks { get; set; }
      public bool IncludeFinishedWorkItems { get; set; }
      public bool IncludeIndirectWorkItems { get; set; }
      public string Layout { get; set; }
      public bool OptimizeLinks { get; set; }
   }
}
