@page "/"

@using AzureDevOpsWorkItemVisualizer.Core
@using AzureDevOpsWorkItemVisualizer.Core.Model
@using Microsoft.AspNetCore.Components
@using System
@using System.Collections.Generic
@using System.Linq
@using System.Threading.Tasks

@inject IJSRuntime Javascript
@inject Blazored.LocalStorage.ISyncLocalStorageService LocalStorage
@inject NavigationManager NavigationManager

<div>
   <div style="position: fixed; top: 10px; left: 10px;" @onload="LoadEditorValues">
      <div style="background-color: #e5e5e5; border-radius: 10px; padding: 10px; width: 275px;">
         <div hidden="@(_editorVisible == false)">
            <div><label for="organization">Organization</label></div>
            <div><input id="organization" @bind="_editorValues.Organization" type="text" /></div>
            <div><label for="project">Project</label></div>
            <div><input id="project" @bind="_editorValues.Project" type="text" /></div>
            <div><label for="pat">Personal access token</label></div>
            <div><input id="pat" @bind="_editorValues.PersonalAccessToken" type="password" /></div>
            <div>
               <input id="storePat" @bind="_editorValues.StorePersonalAccessToken" type="checkbox" />
               <label for="storePat">Store personal access token</label>
            </div>
            <div><label for="ids">Work item ids</label></div>
            <div><input id="ids" @bind="_editorValues.WorkItemIds" type="text" /></div>
            <div>
               <input id="includeEpics" @bind="_editorValues.IncludeEpics" type="checkbox" />
               <label for="includeEpics">Epics</label>
               <input id="includeFeatures" @bind="_editorValues.IncludeFeatures" type="checkbox" />
               <label for="includeFeatures">Features</label>
               <input id="includePbis" @bind="_editorValues.IncludePbis" type="checkbox" />
               <label for="includePbis">PBIs</label>
            </div>
            <div>
               <input id="includeFinished" @bind="_editorValues.IncludeFinishedWorkItems" type="checkbox" />
               <label for="includeFinished">Finished</label>
               <input id="includeIndirect" @bind="_editorValues.IncludeIndirectWorkItems" type="checkbox" />
               <label for="includeIndirect">Indirect</label>
            </div>
            <div>
               <select @bind="_editorValues.Layout">
                  <option value="left-right">Left to right</option>
                  <option value="top-down">Top down</option>
               </select>
            </div>
         </div>
         <div>
            <button style="width: 90px" disabled="@(_loading)" @onclick="LoadWorkItems">
               <span hidden="@(_loading)">Load</span>
               <span hidden="@(!_loading)">Loading...</span>
            </button>
            <div style="float: right">
               @*<span class="oi oi-link-intact"></span>*@
               <span class="oi oi-collapse-up" hidden="@(!_editorVisible)" @onclick="ToggleEditorVisibility"></span>
               <span class="oi oi-expand-down" hidden="@(_editorVisible)" @onclick="ToggleEditorVisibility"></span>
            </div>
         </div>
      </div>
   </div>
   <div id="graph"></div>
</div>

@code {
   private readonly EditorValues _editorValues = new EditorValues();
   private bool _loading;
   private bool _editorVisible = true;

   private string _graph;
   private ElementReference _viz;

   protected override void OnAfterRender(bool firstRender)
   {
      if (firstRender)
      {
         LoadEditorValues();
      }

      base.OnAfterRender(firstRender);
   }

   private ISet<int> ParseIds()
   {
      return _editorValues.WorkItemIds
         .Split(new[] { ' ', ',' }, StringSplitOptions.RemoveEmptyEntries)
         .Select(int.Parse)
         .ToHashSet();
   }

   private async Task LoadWorkItems()
   {
      try
      {
         SaveEditorValues();

         _loading = true;

         var workItemIds = ParseIds();
         var workItemTypes = new HashSet<WorkItemType>();
         if (_editorValues.IncludeEpics) workItemTypes.Add(WorkItemType.Epic);
         if (_editorValues.IncludeFeatures) workItemTypes.Add(WorkItemType.Feature);
         if (_editorValues.IncludePbis) workItemTypes.Add(WorkItemType.PBI);
         var client = new AzureDevOpsClient(new AzureDevOpsClientOptions
            {
               Organization = _editorValues.Organization,
               PersonalAccessToken = _editorValues.PersonalAccessToken,
               Project = _editorValues.Project
            });
         var crawler = _editorValues.IncludeIndirectWorkItems
            ? (ICrawler)new IndirectLinksCrawler(client)
            : new DirectLinksCrawler(client);
         var data = await crawler.GetData(workItemIds, workItemTypes, _editorValues.IncludeFinishedWorkItems);
         var rankdir = _editorValues.Layout == "left-right" ? "LR" : "TD";
         var graph = new GraphGenerator().GenerateGraph(data, workItemIds, rankdir);

         Console.WriteLine(graph);

         await Javascript.InvokeVoidAsync("updateGraph", graph);
      }
      catch (Exception exception)
      {
         await Javascript.InvokeVoidAsync("alert", exception.ToString());
      }
      finally
      {
         _loading = false;
      }
   }

   private void LoadEditorValues()
   {
      var empty = "";
      var values = LocalStorage.GetItem<EditorValues>("editor");

      _editorValues.Organization = values?.Organization ?? empty;
      _editorValues.Project = values?.Project ?? empty;
      _editorValues.PersonalAccessToken = values?.PersonalAccessToken ?? empty;
      _editorValues.StorePersonalAccessToken = values?.StorePersonalAccessToken ?? false;
      _editorValues.WorkItemIds = values?.WorkItemIds ?? empty;
      _editorValues.IncludeEpics = values?.IncludeEpics ?? false;
      _editorValues.IncludeFeatures = values?.IncludeFeatures ?? true;
      _editorValues.IncludeFinishedWorkItems = values?.IncludeFinishedWorkItems ?? false;
      _editorValues.IncludeIndirectWorkItems = values?.IncludeIndirectWorkItems ?? false;
      _editorValues.IncludePbis = values?.IncludePbis ?? true;
      _editorValues.Layout = values?.Layout == "top-down" ? "top-down" : "left-right";

      //var query = new Uri(NavigationManager.Uri).ParseQueryString();

      //query.

      StateHasChanged();

      Console.WriteLine("editor values loaded");
   }

   private void SaveEditorValues()
   {
      LocalStorage.SetItem("editor", _editorValues);
   }

   private void ToggleEditorVisibility()
   {
      _editorVisible = !_editorVisible;
   }

   private class EditorValues
   {
      public string Organization { get; set; }
      public string Project { get; set; }
      public string PersonalAccessToken { get; set; }
      public string WorkItemIds { get; set; }
      public bool StorePersonalAccessToken { get; set; }
      public bool IncludeEpics { get; set; }
      public bool IncludeFeatures { get; set; }
      public bool IncludePbis { get; set; }
      public bool IncludeFinishedWorkItems { get; set; }
      public bool IncludeIndirectWorkItems { get; set; }
      public string Layout { get; set; }
   }
}
